# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tsXrQtzv8bNKRnj3Kmpn1Im-17JBZN5T
"""

#!/usr/bin/env python3
"""
ACA Pricing Dashboard - Setup Script
Cross-platform setup for Windows, Mac, and Linux
"""

import os
import subprocess
import sys

def run_command(command):
    """Run a command and return success status"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def install_packages():
    """Install required packages"""
    packages = [
        "streamlit>=1.28.0",
        "pandas>=2.0.0",
        "numpy>=1.24.0",
        "plotly>=5.15.0"
    ]

    print("📦 Installing required packages...")
    for package in packages:
        print(f"   Installing {package}...")
        success, stdout, stderr = run_command(f"{sys.executable} -m pip install {package}")
        if not success:
            print(f"❌ Failed to install {package}: {stderr}")
            return False
        print(f"✅ {package} installed successfully")

    return True

def verify_installation():
    """Verify all packages are installed correctly"""
    print("🔍 Verifying installation...")

    try:
        import streamlit
        import pandas
        import numpy
        import plotly
        print("✅ All packages verified successfully!")
        print(f"   - Streamlit: {streamlit.__version__}")
        print(f"   - Pandas: {pandas.__version__}")
        print(f"   - NumPy: {numpy.__version__}")
        print(f"   - Plotly: {plotly.__version__}")
        return True
    except ImportError as e:
        print(f"❌ Package verification failed: {e}")
        return False

def create_project_structure():
    """Create the project directory and files"""

    project_dir = "aca-pricing-dashboard"

    # Create main directory
    if not os.path.exists(project_dir):
        os.makedirs(project_dir)
        print(f"✅ Created directory: {project_dir}")
    else:
        print(f"📁 Using existing directory: {project_dir}")

    os.chdir(project_dir)

    # Create .streamlit directory
    streamlit_dir = ".streamlit"
    if not os.path.exists(streamlit_dir):
        os.makedirs(streamlit_dir)
        print(f"✅ Created directory: {streamlit_dir}")

    # Create requirements.txt
    requirements_content = """streamlit>=1.28.0
pandas>=2.0.0
numpy>=1.24.0
plotly>=5.15.0"""

    with open("requirements.txt", "w") as f:
        f.write(requirements_content)
    print("✅ Created requirements.txt")

    # Create config.toml
    config_content = """[theme]
primaryColor = "#1f77b4"
backgroundColor = "#ffffff"
secondaryBackgroundColor = "#f0f2f6"
textColor = "#262730"
font = "sans serif"

[server]
maxUploadSize = 200
maxMessageSize = 200
enableCORS = false
enableXsrfProtection = true

[browser]
gatherUsageStats = false
showErrorDetails = false

[logger]
level = "info"

[client]
caching = true
displayEnabled = true"""

    with open(os.path.join(streamlit_dir, "config.toml"), "w") as f:
        f.write(config_content)
    print("✅ Created .streamlit/config.toml")

    # Create .gitignore
    gitignore_content = """__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.venv/
pip-log.txt
pip-delete-this-directory.txt
.DS_Store
*.pyc
.streamlit/secrets.toml"""

    with open(".gitignore", "w") as f:
        f.write(gitignore_content)
    print("✅ Created .gitignore")

    return os.getcwd()

def create_sample_app():
    """Create a simple sample app for testing"""

    sample_app = '''import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

st.set_page_config(
    page_title="🎯 ACA Test App",
    page_icon="💰",
    layout="wide"
)

st.title("🎯 ACA Pricing Dashboard - Test Installation")

st.success("✅ Streamlit is working correctly!")

# Test basic functionality
col1, col2 = st.columns(2)

with col1:
    st.subheader("📊 Test Chart")
    data = pd.DataFrame({
        'x': range(10),
        'y': np.random.randn(10)
    })
    fig = px.line(data, x='x', y='y', title="Sample Chart")
    st.plotly_chart(fig, use_container_width=True)

with col2:
    st.subheader("🎯 Test Metrics")
    st.metric("Sample Metric", "100%", "5%")
    st.metric("Another Metric", "$1,000", "-2%")

st.info("🚀 Ready to replace this with your ACA Pricing Dashboard code!")
'''

    with open("test_app.py", "w") as f:
        f.write(sample_app)
    print("✅ Created test_app.py (sample application)")

def main():
    """Main setup function"""

    print("🎯 ACA Pricing Dashboard - Setup Script")
    print("=" * 50)
    print("This script will set up everything needed for your Streamlit app")
    print()

    # Check Python version
    if sys.version_info < (3, 7):
        print("❌ Python 3.7 or higher is required")
        print(f"   Current version: {sys.version}")
        sys.exit(1)

    print(f"✅ Python version: {sys.version.split()[0]}")

    # Install packages
    if not install_packages():
        print("❌ Package installation failed")
        sys.exit(1)

    # Verify installation
    if not verify_installation():
        print("❌ Package verification failed")
        sys.exit(1)

    # Create project structure
    project_path = create_project_structure()

    # Create sample app
    create_sample_app()

    print()
    print("🎉 Setup Complete!")
    print("=" * 50)
    print(f"📁 Project directory: {project_path}")
    print()
    print("📋 Next Steps:")
    print("1. Test installation:")
    print("   streamlit run test_app.py")
    print()
    print("2. Replace test_app.py with your ACA dashboard code")
    print("   (rename your code file to app.py)")
    print()
    print("3. Run your dashboard:")
    print("   streamlit run app.py")
    print()
    print("4. Deploy to Streamlit Cloud when ready!")
    print()
    print("🌐 Your dashboard will be available at: http://localhost:8501")

if __name__ == "__main__":
    main()
